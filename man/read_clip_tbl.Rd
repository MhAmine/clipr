% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_clip_tbl.R
\name{read_clip_tbl}
\alias{read_clip_tbl}
\title{Transforms Output of Read_clip into Data.Frame.}
\usage{
read_clip_tbl(x = read_clip(), ...)
}
\arguments{
\item{x}{the excel table clip to transform to data.frame}

\item{\ldots}{list of other readr options}
}
\value{
A data.frame with the contents of the clipboard.
       If the system clipboard is empty, returns NULL
}
\description{
Transforms clipped content into Data.Frame by putting read_clip output through using readr functionality.
}
\examples{
# excel contents
#' #            thingOne        thingTwo
# 1 the thing I might the thing I may
# 2    become despite coding this way

# excel contents after read_clip copies
clip_contents_from_excel_table <- c(
"thingOne\\tthingTwo",
"the thing I might\\tthe thing I may",
"become despite\\tcoding this way")

cat_in_the_hat <- read_clip_tbl(clip_contents_from_excel_table )
print(cat_in_the_hat)
#            thingOne        thingTwo
# 1 the thing I might the thing I may
# 2    become despite coding this way

\dontrun{
# Another example
# Take the example of a spreadsheet containing the Cat-in-the-Hat-like
nursery rhyme from Thing One and Thing Two.
#
# ``` r
# # spreadsheet containing 3 variables
# # line           thingOne         thingTwo
# #    1  the thing I might  the thing I may
# #    2     become despite  coding this way
# ```
#
# You could copy it from the spreadsheet and then paste directly to
data.frame via `cat_in_the_hat <- read_clip_tbl()`. It automatically
handles type conversion on your dataframe.
#
# Or, if you have already assigned the contents to a variable like below:
#   ``` r
# # excel contents after read_clip copies are inside
# clip_contents_from_excel_table <- read_clip()
# print(clip_contents_from_excel_table)
#
# [1] "line\\tthingOne\\tthingTwo"  "1\\tthe thing I might\\tthe thing I may"
 "2\\tbecome despite\\tcoding this way"
# ```
#
# You can still reassign `clip_contents_from_excel_table` through
`read_clip_tbl()` to get a quick transformation to data.frame.
#
# ``` r
# cat_in_the_hat <- read_clip_tbl(clip_contents_from_excel_table )
# str(cat_in_the_hat)
# # 'data.frame':	2 obs. of  3 variables:
# #  $ line    : int  1 2
# #  $ thingOne: chr  "the thing I might" "become despite"
# #  $ thingTwo: chr  "the thing I may" "coding this way"
# ```
#
# It also allows access other `readr::read_tsv` options directly via
the `...` parameters. For example, with `readr`'s `readr::read_tsv`
`col_names` option, you can declare \\ whether the clip already contains
a header with `TRUE` or `FALSE`, or you can supply a vector of column
names. The `cat_in_the_hat` clip above could have had its column names
changed in the assignment step, as below:
#
# ``` r
# cat_in_the_hat <- read_clip_tbl(col_names=c("", "you", "me")
# # 'data.frame':	2 obs. of  3 variables:
# #  $ V1 : int  1 2
#' # #  $ you: chr  "the thing I might" "become despite"
# #  $ me : chr  "the thing I may" "coding this way"
# ```}
}

